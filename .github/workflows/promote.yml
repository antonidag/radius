name: Promote Integration v2

on:
  workflow_call:
    inputs:
      integration_id:
        required: true
        type: string
        description: 'Integration ID, e.g. int2001'
      target_tag:
        required: true
        type: string
        description: 'Environment tag to promote to, e.g. dev, test, prod'
      commit_sha:
        required: true
        type: string
    outputs:
      version_tag:
        description: 'The version tag of the promoted image'
        value: ${{ jobs.promote.outputs.version_tag }}

permissions:
  packages: write
  contents: read

jobs:
  promote:
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.vtag_image.outputs.version_tag }}
    env:
      GHCR: ghcr.io/${{ github.repository_owner }}
      INTEGRATION_ID: ${{ inputs.integration_id }}
      TARGET_TAG: ${{ inputs.target_tag }}
      SOURCE_TAG: ${{ inputs.commit_sha }}
      VERSION_TAG: v-${{ inputs.integration_id }}-${{ inputs.commit_sha }}
    steps:
      - name: Set image name
        id: meta
        run: echo "image=$GHCR/$INTEGRATION_ID" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Verify image with commit SHA exists
        run: |
          IMAGE=${{ steps.meta.outputs.image }}
          echo "Checking $IMAGE:${{ env.SOURCE_TAG }}..."
          if ! docker pull $IMAGE:${{ env.SOURCE_TAG }}; then
            echo "::error ::Image $IMAGE:${{ env.SOURCE_TAG }} not found. You probably forgot to build it."
            exit 1
          fi

      - name: Promote image to $TARGET_TAG
        run: |
          IMAGE=${{ steps.meta.outputs.image }}
          docker tag $IMAGE:${{ env.SOURCE_TAG }} $IMAGE:${{ env.TARGET_TAG }}
          docker push $IMAGE:${{ env.TARGET_TAG }}
          echo "Image $IMAGE:${{ env.TARGET_TAG }} promoted successfully."

      - name: Tag the image with version
        if: ${{ inputs.target_tag == 'prod' }}
        id: vtag_image
        run: |
          IMAGE=${{ steps.meta.outputs.image }}
          docker tag $IMAGE:${{ env.SOURCE_TAG }} $IMAGE:${{ env.VERSION_TAG }}
          docker push $IMAGE:${{ env.VERSION_TAG }}
          echo "Image $IMAGE:${{ env.VERSION_TAG }} pushed successfully."
          echo "version_tag=${{ env.VERSION_TAG }}" >> $GITHUB_OUTPUT
